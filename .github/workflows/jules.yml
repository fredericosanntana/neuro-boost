name: Jules - Multi-Agent Automation

on:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  run-jules:
    # Executa se a issue tem a label "jules"
    if: contains(github.event.issue.labels.*.name, 'jules')
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Debug - Dump event payload
        run: |
          echo "--- EVENT ---"
          echo "${{ toJSON(github.event) }}"
          echo "--- LABELS ---"
          echo "${{ join(github.event.issue.labels.*.name, ', ') }}"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Parse Issue Data
        id: issue_data
        run: |
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> "$GITHUB_OUTPUT"
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          echo "TASK_ID=task-${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"

      - name: Setup gh auth
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth status || true
          gh auth setup-git

      - name: Start Execution
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment "${{ github.event.issue.number }}" \
            --repo "$GITHUB_REPOSITORY" \
            --body "🤖 Jules automation started! Working on: ${{ steps.issue_data.outputs.ISSUE_TITLE }}"

      - name: Create Automation Scripts
        run: |
          mkdir -p scripts/automation

          cat > scripts/automation/deploy.sh << 'EOF'
#!/bin/bash
# Auto-generated by Jules Multi-Agent System
# Issue: ${{ steps.issue_data.outputs.ISSUE_TITLE }}

set -euo pipefail

echo "🚀 Starting deployment automation..."
echo "Task ID: ${{ steps.issue_data.outputs.TASK_ID }}"
echo "Issue: #${{ steps.issue_data.outputs.ISSUE_NUMBER }}"

# Create deployment configuration
mkdir -p config/deployment

cat > config/deployment/docker-compose.yml << 'DEPLOY_EOF'
version: '3.8'
services:
  app:
    build: .
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
    labels:
      - "automation.source=jules"
      - "automation.task=${{ steps.issue_data.outputs.TASK_ID }}"
DEPLOY_EOF

echo "✅ Deployment automation completed"
EOF

          chmod +x scripts/automation/deploy.sh

          cat > scripts/automation/monitor.sh << 'EOF'
#!/bin/bash
# Health check script generated by Jules
# Issue: ${{ steps.issue_data.outputs.ISSUE_TITLE }}

echo "🔍 Monitoring automation health..."
curl -f http://localhost:8080/health || exit 1
echo "✅ Health check passed"
EOF

          chmod +x scripts/automation/monitor.sh

          cat > AUTOMATION.md << 'EOF'
# Automation Report

**Task**: ${{ steps.issue_data.outputs.ISSUE_TITLE }}
**Issue**: #${{ steps.issue_data.outputs.ISSUE_NUMBER }}
**Task ID**: ${{ steps.issue_data.outputs.TASK_ID }}

## Scripts Created
- scripts/automation/deploy.sh - Deployment automation
- scripts/automation/monitor.sh - Health monitoring
- config/deployment/docker-compose.yml - Deployment configuration

## Usage
```bash
# Execute deployment
./scripts/automation/deploy.sh

# Monitor health
./scripts/automation/monitor.sh
```

## Status
✅ Automation completed by Jules Multi-Agent System
EOF

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          BRANCH_NAME="jules-${{ steps.issue_data.outputs.TASK_ID }}"
          git checkout -b "$BRANCH_NAME"
          git add -A

          if ! git diff --cached --quiet; then
            git commit -m "🤖 Jules: ${{ steps.issue_data.outputs.ISSUE_TITLE }}"
            git push --set-upstream origin "$BRANCH_NAME"

            gh pr create \
              --repo "$GITHUB_REPOSITORY" \
              --title "🤖 Jules Automation: ${{ steps.issue_data.outputs.ISSUE_TITLE }}" \
              --body "Auto-generated automation for issue #${{ steps.issue_data.outputs.ISSUE_NUMBER }}" \
              --label jules \
              --label automated

            echo "✅ PR created successfully"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Report Results
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            gh issue comment "${{ github.event.issue.number }}" \
              --repo "$GITHUB_REPOSITORY" \
              --body "✅ Jules automation completed! Check the PR for automation scripts and configurations."
          else
            gh issue comment "${{ github.event.issue.number }}" \
              --repo "$GITHUB_REPOSITORY" \
              --body "❌ Jules automation failed. Check the workflow logs for details."
          fi