name: Codex - Multi-Agent Code Implementation

on:
  issues:
    types: [labeled, opened]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: codex-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  run-codex:
    if: >
      (github.event_name == 'issues' &&
       contains(github.event.issue.labels.*.name, 'codex')) ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.state == 'open' &&
       startsWith(github.event.comment.body, '/codex'))
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          npm install -g @anthropic-ai/claude-code
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Parse Multi-Agent Metadata
        id: metadata
        run: |
          LABELS='${{ toJson(github.event.issue.labels) }}'
          SOURCE_AGENT=$(echo "$LABELS" | jq -r '.[] | select(.name | startswith("source:")) | .name' | cut -d: -f2 || echo "unknown")
          TASK_TYPE=$(echo "$LABELS" | jq -r '.[] | select(.name | startswith("type:")) | .name' | cut -d: -f2 || echo "unspecified")
          COMPLEXITY=$(echo "$LABELS" | jq -r '.[] | select(.name | startswith("complexity:")) | .name' | cut -d: -f2 || echo "medium")
          TASK_ID=$(echo "$LABELS" | jq -r '.[] | select(.name | startswith("task-id:")) | .name' | cut -d: -f2 || echo "unknown")
          PRIORITY=$(echo "$LABELS" | jq -r '.[] | select(.name | startswith("priority:")) | .name' | cut -d: -f2 || echo "normal")
          
          echo "SOURCE_AGENT=$SOURCE_AGENT" >> $GITHUB_OUTPUT
          echo "TASK_TYPE=$TASK_TYPE" >> $GITHUB_OUTPUT  
          echo "COMPLEXITY=$COMPLEXITY" >> $GITHUB_OUTPUT
          echo "TASK_ID=$TASK_ID" >> $GITHUB_OUTPUT
          echo "PRIORITY=$PRIORITY" >> $GITHUB_OUTPUT
          
          echo "📊 Multi-Agent Context Parsed:"
          echo "  Source Agent: $SOURCE_AGENT"
          echo "  Task Type: $TASK_TYPE"
          echo "  Complexity: $COMPLEXITY"
          echo "  Task ID: $TASK_ID"
          echo "  Priority: $PRIORITY"

      - name: Update Task Status to In Progress
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Update execution tracker if available
          if [[ -f "agents/execution/execution_tracker.py" ]]; then
            python3 agents/execution/execution_tracker.py update-status \
              --task-id "${{ steps.metadata.outputs.TASK_ID }}" \
              --status "in_progress" || echo "Task tracking not available"
          fi
          
          # Add comment to issue
          gh issue comment "${{ github.event.issue.number }}" --body "
          🤖 **Codex Execution Started**
          
          **Multi-Agent Context:**
          - Source Agent: \`${{ steps.metadata.outputs.SOURCE_AGENT }}\`
          - Task Type: \`${{ steps.metadata.outputs.TASK_TYPE }}\`
          - Complexity: \`${{ steps.metadata.outputs.COMPLEXITY }}\`
          - Priority: \`${{ steps.metadata.outputs.PRIORITY }}\`
          - Status: \`🔄 IN PROGRESS\`
          
          **Execution Plan:**
          1. ✅ Parse multi-agent context
          2. 🔄 Generate context-aware implementation
          3. ⏳ Create comprehensive tests
          4. ⏳ Validate against requirements
          5. ⏳ Create pull request
          
          _This is an automated execution by the Multi-Agent system._
          "

      - name: Generate Context-Aware Implementation Prompt
        id: prompt
        run: |
          TITLE="${{ github.event.issue.title }}"
          BODY="${{ github.event.issue.body }}"
          URL="${{ github.event.issue.html_url }}"
          SOURCE="${{ steps.metadata.outputs.SOURCE_AGENT }}"
          TYPE="${{ steps.metadata.outputs.TASK_TYPE }}"
          COMPLEXITY="${{ steps.metadata.outputs.COMPLEXITY }}"
          TASK_ID="${{ steps.metadata.outputs.TASK_ID }}"
          PRIORITY="${{ steps.metadata.outputs.PRIORITY }}"
          
          # Create enhanced prompt with multi-agent context
          {
            echo "# Multi-Agent Code Implementation Task"
            echo
            echo "## Execution Context"
            echo "- **Task ID**: $TASK_ID"
            echo "- **Source Agent**: $SOURCE"
            echo "- **Task Type**: $TYPE" 
            echo "- **Complexity**: $COMPLEXITY"
            echo "- **Priority**: $PRIORITY"
            echo "- **Issue URL**: $URL"
            echo "- **Repository**: ${{ github.repository }}"
            echo
            echo "## Integration Requirements"
            echo "This task was automatically delegated from our **Multi-Agent Architecture** system."
            echo "You must implement following our established patterns and integrate with:"
            echo
            echo "- ✅ **OpenAI MCP**: Available for enhanced AI capabilities"
            echo "- ✅ **Cipher MCP**: Store important patterns and decisions"
            echo "- ✅ **Existing Architecture**: Follow project conventions"
            echo "- ✅ **Multi-Agent Patterns**: Maintain compatibility"
            echo
            echo "## Quality Requirements"
            echo "**MANDATORY DELIVERABLES:**"
            echo "- ✅ Implementation exactly as specified"
            echo "- ✅ Comprehensive tests (≥85% coverage)"
            echo "- ✅ Follow existing code standards"
            echo "- ✅ Generate clean, documented code"
            echo "- ✅ Create detailed PR description"
            echo "- ✅ Ensure all CI checks pass"
            echo
            echo "## Task Specification from $SOURCE Agent"
            echo
            echo "**Original Issue Title:** $TITLE"
            echo
            echo "**Implementation Requirements:**"
            echo "$BODY"
            echo
            echo "---"
            echo
            echo "**EXECUTE THIS TASK WITH FULL MULTI-AGENT INTEGRATION**"
          } > codex_prompt.txt
          
          echo "PROMPT_FILE=codex_prompt.txt" >> $GITHUB_OUTPUT
          echo "✅ Generated context-aware prompt for Codex"

      - name: Execute Codex Implementation
        id: codex
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Set multi-agent context for Codex
          export SOURCE_AGENT="${{ steps.metadata.outputs.SOURCE_AGENT }}"
          export TASK_TYPE="${{ steps.metadata.outputs.TASK_TYPE }}"
          export COMPLEXITY="${{ steps.metadata.outputs.COMPLEXITY }}"
          export TASK_ID="${{ steps.metadata.outputs.TASK_ID }}"
          export PRIORITY="${{ steps.metadata.outputs.PRIORITY }}"
          
          # Execute Codex with enhanced prompt
          echo "🚀 Starting Codex execution with multi-agent context..."
          
          # Create a comprehensive implementation request
          if command -v codex &> /dev/null; then
            # Use Codex if available
            codex exec --ask-for-approval never \
              --sandbox workspace-write \
              --context "multi-agent-$TASK_TYPE" \
              "$(cat codex_prompt.txt)" | tee codex_execution.log
          else
            # Fallback to Claude Code
            echo "Codex not available, using Claude Code as fallback..."
            claude code "$(cat codex_prompt.txt)" | tee codex_execution.log
          fi
          
          echo "EXECUTION_LOG=codex_execution.log" >> $GITHUB_OUTPUT

      - name: Validate Implementation
        id: validation
        run: |
          echo "🔍 Validating implementation..."
          
          VALIDATION_STATUS="success"
          VALIDATION_ISSUES=""
          
          # Check if any new files were created or modified
          if git diff --quiet && git diff --cached --quiet; then
            VALIDATION_STATUS="warning"
            VALIDATION_ISSUES="No files were modified during execution"
          fi
          
          # Run linting if configuration exists
          if [[ -f "package.json" ]] && npm list eslint &>/dev/null; then
            echo "🧹 Running ESLint..."
            npm run lint || {
              VALIDATION_STATUS="warning"
              VALIDATION_ISSUES="$VALIDATION_ISSUES\nLinting issues found"
            }
          fi
          
          # Run tests if available
          if [[ -f "package.json" ]] && npm list jest &>/dev/null; then
            echo "🧪 Running tests..."
            npm test || {
              VALIDATION_STATUS="warning"  
              VALIDATION_ISSUES="$VALIDATION_ISSUES\nTests are failing"
            }
          fi
          
          # Check TypeScript compilation if applicable
          if [[ -f "tsconfig.json" ]] && npm list typescript &>/dev/null; then
            echo "📝 Checking TypeScript compilation..."
            npx tsc --noEmit || {
              VALIDATION_STATUS="warning"
              VALIDATION_ISSUES="$VALIDATION_ISSUES\nTypeScript compilation errors"
            }
          fi
          
          echo "VALIDATION_STATUS=$VALIDATION_STATUS" >> $GITHUB_OUTPUT
          echo "VALIDATION_ISSUES=$VALIDATION_ISSUES" >> $GITHUB_OUTPUT
          echo "✅ Validation completed with status: $VALIDATION_STATUS"

      - name: Create Pull Request
        id: pr
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configure git
          git config user.name "Multi-Agent Codex"
          git config user.email "codex@multi-agent.system"
          
          TASK_ID="${{ steps.metadata.outputs.TASK_ID }}"
          SOURCE_AGENT="${{ steps.metadata.outputs.SOURCE_AGENT }}"
          TASK_TYPE="${{ steps.metadata.outputs.TASK_TYPE }}"
          
          # Create branch
          BRANCH_NAME="codex/${TASK_ID}"
          git checkout -b "$BRANCH_NAME"
          
          # Stage and commit changes
          git add .
          
          if ! git diff --cached --quiet; then
            git commit -m "🤖 Multi-Agent Implementation: ${{ github.event.issue.title }}



Context:
- Task ID: $TASK_ID
- Source Agent: $SOURCE_AGENT  
- Task Type: $TASK_TYPE
- Complexity: ${{ steps.metadata.outputs.COMPLEXITY }}
- Priority: ${{ steps.metadata.outputs.PRIORITY }}

Closes #${{ github.event.issue.number }}

🤖 Generated by Multi-Agent System
Co-authored-by: $SOURCE_AGENT Agent <multi-agent@system>
Co-authored-by: Codex Agent <codex@multi-agent.system>"
            
            # Push branch
            git push origin "$BRANCH_NAME"
            
            # Create PR with detailed description
            PR_BODY="## 🤖 Multi-Agent Implementation

This PR was automatically generated by **Codex** based on requirements from the **$SOURCE_AGENT** agent.

### 📋 Implementation Context
- **Task ID**: \`$TASK_ID\`
- **Source Agent**: \`$SOURCE_AGENT\`
- **Task Type**: \`$TASK_TYPE\`
- **Complexity**: \`${{ steps.metadata.outputs.COMPLEXITY }}\`
- **Priority**: \`${{ steps.metadata.outputs.PRIORITY }}\`
- **Original Issue**: #${{ github.event.issue.number }}

### 🎯 Implementation Summary
This implementation follows our Multi-Agent Architecture patterns and includes:

- ✅ Code implementation as specified
- ✅ Comprehensive testing (targeting ≥85% coverage)
- ✅ Documentation updates
- ✅ Integration with existing patterns
- ✅ Multi-agent system compatibility

### 🔍 Validation Status
- **Status**: ${{ steps.validation.outputs.VALIDATION_STATUS }}
- **Issues**: ${{ steps.validation.outputs.VALIDATION_ISSUES || 'None detected' }}

### 📝 Quality Checklist
- [ ] Code review completed
- [ ] All tests passing
- [ ] Documentation updated
- [ ] Security review (if applicable)
- [ ] Performance validation
- [ ] Multi-agent integration verified

### 🔗 Related
- Closes #${{ github.event.issue.number }}
- Implements requirements from: $SOURCE_AGENT Agent
- Part of Multi-Agent Execution System

---
🤖 **Automated PR by Multi-Agent System**  
Generated by: Codex Agent | Delegated by: $SOURCE_AGENT Agent"

            # Create the PR
            PR_URL=$(gh pr create \
              --title "🤖 [$SOURCE_AGENT → Codex] ${{ github.event.issue.title }}" \
              --body "$PR_BODY" \
              --label "codex,multi-agent,automated,source:$SOURCE_AGENT" \
              --assignee "${{ github.actor }}")
            
            echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
            echo "✅ Created PR: $PR_URL"
          else
            echo "No changes to commit"
            echo "PR_URL=" >> $GITHUB_OUTPUT
          fi

      - name: Update Task Status and Report Results
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TASK_ID="${{ steps.metadata.outputs.TASK_ID }}"
          SOURCE_AGENT="${{ steps.metadata.outputs.SOURCE_AGENT }}"
          
          # Determine final status
          if [[ "${{ job.status }}" == "success" && -n "${{ steps.pr.outputs.PR_URL }}" ]]; then
            FINAL_STATUS="completed"
            STATUS_ICON="✅"
            STATUS_MESSAGE="Implementation completed successfully"
          elif [[ "${{ job.status }}" == "success" ]]; then
            FINAL_STATUS="completed"
            STATUS_ICON="⚠️"
            STATUS_MESSAGE="Execution completed but no changes were made"
          else
            FINAL_STATUS="failed"
            STATUS_ICON="❌"  
            STATUS_MESSAGE="Execution failed"
          fi
          
          # Update execution tracker
          if [[ -f "agents/execution/execution_tracker.py" ]]; then
            python3 agents/execution/execution_tracker.py update-status \
              --task-id "$TASK_ID" \
              --status "$FINAL_STATUS" \
              --error "$STATUS_MESSAGE" || echo "Task tracking not available"
          fi
          
          # Report to issue
          REPORT_BODY="$STATUS_ICON **Codex Execution Report**

**Multi-Agent Context:**
- Source Agent: \`$SOURCE_AGENT\`
- Task Type: \`${{ steps.metadata.outputs.TASK_TYPE }}\`
- Complexity: \`${{ steps.metadata.outputs.COMPLEXITY }}\`
- Task ID: \`$TASK_ID\`
- Final Status: \`$FINAL_STATUS\`

**Execution Results:**
- Implementation Status: $STATUS_MESSAGE
- Validation: ${{ steps.validation.outputs.VALIDATION_STATUS }}
- Pull Request: ${{ steps.pr.outputs.PR_URL || 'Not created' }}
- Execution Log: Available in workflow artifacts

**Next Steps:**"
          
          if [[ -n "${{ steps.pr.outputs.PR_URL }}" ]]; then
            REPORT_BODY="$REPORT_BODY
- 🔍 Code review the created PR
- 🧪 Verify tests are passing  
- 📋 Complete quality checklist
- ✅ Merge when approved"
          else
            REPORT_BODY="$REPORT_BODY
- 🔍 Check execution logs for details
- 🛠️ Manual intervention may be required
- 📞 Contact @multi-agent-system for support"
          fi
          
          REPORT_BODY="$REPORT_BODY

---
🤖 **Multi-Agent System** | Execution ID: \`${{ github.run_id }}\`"

          # Post the report
          gh issue comment "${{ github.event.issue.number }}" --body "$REPORT_BODY"
          
          echo "📊 Final execution report posted"

      - name: Upload Execution Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: codex-execution-${{ steps.metadata.outputs.TASK_ID }}
          path: |
            codex_*.log
            codex_*.txt
          retention-days: 7
